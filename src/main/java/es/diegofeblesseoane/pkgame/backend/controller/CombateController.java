package es.diegofeblesseoane.pkgame.backend.controller;

import es.diegofeblesseoane.pkgame.PrincipalApplication;
import es.diegofeblesseoane.pkgame.backend.model.TipoPokemon;
import es.diegofeblesseoane.pkgame.backend.model.PokemonEvolucion;
import es.diegofeblesseoane.pkgame.backend.model.UsuarioEntity;
import es.diegofeblesseoane.pkgame.backend.model.UsuarioSesion;
import es.diegofeblesseoane.pkgame.backend.model.UsuarioServiceModel;
import es.diegofeblesseoane.pkgame.backend.model.PokemonEntity;
import es.diegofeblesseoane.pkgame.backend.model.MovimientoEntity;
import es.diegofeblesseoane.pkgame.backend.service.CombateService;
import es.diegofeblesseoane.pkgame.backend.service.CalculadoraDano;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.stage.Stage;

import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

public class CombateController {

    @FXML
    private Button buttonFuego;
    
    @FXML
    private Button buttonAgua;
    
    @FXML
    private Button buttonPlanta;
    
    @FXML
    private Button buttonVolverMenu;
    
    @FXML
    private Button buttonNuevoCombate;
    
    // Botones de ataques
    @FXML
    private Button buttonAtaque1;
    
    @FXML
    private Button buttonAtaque2;
    
    @FXML
    private Button buttonAtaque3;
    
    @FXML
    private Button buttonAtaque4;
    
    @FXML
    private Label labelResultado;
    
    @FXML
    private Label labelDetalles;
    
    @FXML
    private ImageView imagenJugador;
    
    @FXML
    private ImageView imagenIA;
    
    @FXML
    private Label labelJugador;
    
    @FXML
    private Label labelIA;
    
    // Barras de vida
    @FXML
    private Label labelVidaJugador;
    
    @FXML
    private Label labelVidaIA;
    
    // Sistema de combate con rondas y evoluciones
    private UsuarioServiceModel usuarioService;
    private Random random = new Random();
    
    // Variables del combate por rondas
    private int rondaActual = 0;
    private int victoriasJugador = 0;
    private int victoriasIA = 0;
    private List<String> resultadosRondas = new ArrayList<>();
    private boolean combateActivo = false;
    private boolean pokemonSeleccionado = false; // Nueva variable de control
    
    // Pok√©mon actuales
    private PokemonEvolucion pokemonJugador;
    private PokemonEvolucion pokemonIA;
    private TipoPokemon tipoPokemonJugador;  // Pok√©mon elegido al inicio
    private TipoPokemon tipoPokemonIA;       // Pok√©mon de la IA
    private TipoPokemon tipoRondaJugador;    // Tipo elegido en cada ronda
    private TipoPokemon tipoRondaIA;         // Tipo de la IA en cada ronda
    
    // Variables para el combate real
    private boolean combateRealActivo = false;
    private PokemonEntity pokemonCombateJugador;
    private PokemonEntity pokemonCombateIA;
    private CombateService combateService;
    private boolean turnoJugador = true;
    
    @FXML
    public void initialize() {
        usuarioService = new UsuarioServiceModel();
        try {
            combateService = new CombateService();
        } catch (Exception e) {
            System.err.println("Error al inicializar CombateService: " + e.getMessage());
        }
        resetearInterfaz();
        mostrarInformacionUsuario();
    }
    
    /**
     * Muestra la informaci√≥n del usuario logueado
     */
    private void mostrarInformacionUsuario() {
        UsuarioEntity usuario = UsuarioSesion.getInstancia().getUsuario();
        if (usuario != null) {
            // Actualizar las estad√≠sticas globales con las del usuario
            victoriasJugador = usuario.getVictoriasTotales();
            victoriasIA = usuario.getDerrotasTotales();
            
            System.out.println("üë§ Usuario en combate: " + usuario.getNombre() + " " + usuario.getTitulo());
        }
    }
    
    @FXML
    public void onFuegoClick() {
        if (!pokemonSeleccionado) {
            // FASE 1: Selecci√≥n de Pok√©mon inicial
            seleccionarPokemon(TipoPokemon.FUEGO);
        } else if (combateActivo) {
            // FASE 2: Elegir tipo para esta ronda
            elegirTipoRonda(TipoPokemon.FUEGO);
        }
    }
    
    @FXML
    public void onAguaClick() {
        if (!pokemonSeleccionado) {
            // FASE 1: Selecci√≥n de Pok√©mon inicial
            seleccionarPokemon(TipoPokemon.AGUA);
        } else if (combateActivo) {
            // FASE 2: Elegir tipo para esta ronda
            elegirTipoRonda(TipoPokemon.AGUA);
        }
    }
    
    @FXML
    public void onPlantaClick() {
        if (!pokemonSeleccionado) {
            // FASE 1: Selecci√≥n de Pok√©mon inicial
            seleccionarPokemon(TipoPokemon.PLANTA);
        } else if (combateActivo) {
            // FASE 2: Elegir tipo para esta ronda
            elegirTipoRonda(TipoPokemon.PLANTA);
        }
    }
    
    @FXML
    public void onAtaque1Click() {
        if (combateRealActivo) {
            ejecutarAtaqueReal(0);
        }
    }
    
    @FXML
    public void onAtaque2Click() {
        if (combateRealActivo) {
            ejecutarAtaqueReal(1);
        }
    }
    
    @FXML
    public void onAtaque3Click() {
        if (combateRealActivo) {
            ejecutarAtaqueReal(2);
        }
    }
    
    @FXML
    public void onAtaque4Click() {
        if (combateRealActivo) {
            ejecutarAtaqueReal(3);
        }
    }
    
    @FXML
    public void onVolverMenuClick() {
        try {
            Stage stage = (Stage) buttonVolverMenu.getScene().getWindow();
            FXMLLoader fxmlLoader = new FXMLLoader(PrincipalApplication.class.getResource("menu.fxml"));
            Scene scene = new Scene(fxmlLoader.load(), 2100, 1200);
            stage.setTitle("PK-GAME - Menu");
            stage.setScene(scene);
            stage.show();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    @FXML
    public void onNuevoCombateClick() {
        resetearInterfaz();
    }
    
    /**
     * FASE 1: Seleccionar Pok√©mon inicial (solo una vez)
     */
    private void seleccionarPokemon(TipoPokemon tipoElegido) {
        tipoPokemonJugador = tipoElegido;
        tipoPokemonIA = obtenerTipoAleatorioIA();
        
        // Inicializar Pok√©mon en nivel 1
        pokemonJugador = PokemonEvolucion.getEvolucionInicial(tipoPokemonJugador);
        pokemonIA = PokemonEvolucion.getEvolucionInicial(tipoPokemonIA);
        
        pokemonSeleccionado = true;
        
        // Mostrar mensaje de selecci√≥n
        String mensaje = String.format("üéØ POK√âMON SELECCIONADOS\n\n" +
                                     "Tu Pok√©mon: %s\n" +
                                     "Pok√©mon Rival: %s\n\n" +
                                     "‚ö° Ahora comienzan las 3 rondas de combate\n" +
                                     "En cada ronda, elige Fuego/Agua/Planta para atacar\n\n" +
                                     "üéØ Prepar√°ndote para la Ronda 1...",
                                     pokemonJugador.getInfoCompleta(),
                                     pokemonIA.getInfoCompleta());
        
        labelResultado.setText(mensaje);
        
        // Configurar interfaz
        configurarInterfazSeleccionCompleta();
        
        // Iniciar primera ronda despu√©s de 3 segundos
        new Thread(() -> {
            try {
                Thread.sleep(3000);
                javafx.application.Platform.runLater(() -> iniciarPrimeraRonda());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();
    }
    
    /**
     * FASE 2: Iniciar las rondas de combate (despu√©s de seleccionar Pok√©mon)
     */
    private void iniciarPrimeraRonda() {
        // Reiniciar contadores de rondas
        rondaActual = 1;
        victoriasJugador = 0;
        victoriasIA = 0;
        resultadosRondas.clear();
        combateActivo = true;
        
        // Mostrar mensaje para primera ronda
        mostrarMensajeRonda();
    }
    
    /**
     * FASE 3: Elegir tipo para la ronda actual
     */
    private void elegirTipoRonda(TipoPokemon tipoElegido) {
        if (!combateActivo || rondaActual > 3) {
            return;
        }
        
        tipoRondaJugador = tipoElegido;
        tipoRondaIA = obtenerTipoAleatorioIA();
        
        // Ejecutar la ronda
        ejecutarRondaIndividual();
    }
    
    /**
     * Muestra el mensaje para que el jugador elija tipo en la ronda
     */
    private void mostrarMensajeRonda() {
        if (rondaActual > 3) {
            finalizarCombateRondas();
            return;
        }
        
        String mensaje = String.format("‚öîÔ∏è RONDA %d/3\n\n" +
                                     "%s VS %s\n\n" +
                                     "üí° Elige tu tipo de ataque:\n" +
                                     "üî• Fuego | üíß Agua | üåø Planta\n\n" +
                                     "üéØ Esperando tu elecci√≥n...",
                                     rondaActual,
                                     pokemonJugador.getInfoCompleta(),
                                     pokemonIA.getInfoCompleta());
        
        labelResultado.setText(mensaje);
    }
    
    /**
     * Configura la interfaz despu√©s de seleccionar Pok√©mon
     */
    private void configurarInterfazSeleccionCompleta() {
        // Mostrar informaci√≥n de Pok√©mon
        labelJugador.setText(pokemonJugador.getInfoCompleta());
        labelIA.setText(pokemonIA.getInfoCompleta());
        labelJugador.setVisible(true);
        labelIA.setVisible(true);
        
        // Configurar im√°genes
        configurarImagenesEvolucion();
        
        // Mantener botones visibles para las rondas
        habilitarBotonesSeleccion(true);
        
        // Ocultar elementos no necesarios
        labelVidaJugador.setVisible(false);
        labelVidaIA.setVisible(false);
        Button[] botonesAtaque = {buttonAtaque1, buttonAtaque2, buttonAtaque3, buttonAtaque4};
        for (Button boton : botonesAtaque) {
            boton.setVisible(false);
        }
    }
    
    /**
     * Obtiene un tipo aleatorio para la IA
     */
    private TipoPokemon obtenerTipoAleatorioIA() {
        TipoPokemon[] tipos = {TipoPokemon.FUEGO, TipoPokemon.AGUA, TipoPokemon.PLANTA};
        return tipos[random.nextInt(tipos.length)];
    }
    
    /**
     * Configura la interfaz para el modo de rondas
     */
    private void configurarInterfazRondas() {
        // Ocultar botones de selecci√≥n
        habilitarBotonesSeleccion(false);
        
        // Mostrar informaci√≥n de Pok√©mon
        labelJugador.setText(pokemonJugador.getInfoCompleta());
        labelIA.setText(pokemonIA.getInfoCompleta());
        labelJugador.setVisible(true);
        labelIA.setVisible(true);
        
        // Configurar im√°genes
        configurarImagenesEvolucion();
        
        // Ocultar barras de vida (no las necesitamos en este modo)
        labelVidaJugador.setVisible(false);
        labelVidaIA.setVisible(false);
        
        // Ocultar botones de ataque (usamos piedra-papel-tijera)
        Button[] botonesAtaque = {buttonAtaque1, buttonAtaque2, buttonAtaque3, buttonAtaque4};
        for (Button boton : botonesAtaque) {
            boton.setVisible(false);
        }
    }
    
    /**
     * Configura las im√°genes seg√∫n la evoluci√≥n actual
     */
    private void configurarImagenesEvolucion() {
        try {
            // Imagen del jugador
            Image imagenPokemonJugador = new Image(getClass().getResourceAsStream(pokemonJugador.getRutaImagen()));
            imagenJugador.setImage(imagenPokemonJugador);
            imagenJugador.setVisible(true);
            
            // Imagen de la IA
            Image imagenPokemonIA = new Image(getClass().getResourceAsStream(pokemonIA.getRutaImagen()));
            imagenIA.setImage(imagenPokemonIA);
            imagenIA.setVisible(true);
        } catch (Exception e) {
            System.err.println("‚ö†Ô∏è Error al cargar im√°genes de evoluci√≥n: " + e.getMessage());
        }
    }
    
    /**
     * Ejecuta una ronda individual despu√©s de que el jugador elija tipo
     */
    private void ejecutarRondaIndividual() {
        if (rondaActual > 3) {
            finalizarCombateRondas();
            return;
        }
        
        // Determinar ganador de la ronda
        String resultadoRonda = determinarGanadorRondaIndividual();
        
        // Mostrar resultado
        String mensaje = String.format("‚öîÔ∏è RONDA %d/3 - RESULTADO\n\n" +
                                      "%s VS %s\n\n" +
                                      "Tu ataque: %s | Ataque rival: %s\n\n" +
                                      "%s\n\n" +
                                      "Puntuaci√≥n: T√∫ %d - %d Rival",
                                      rondaActual,
                                      pokemonJugador.getInfoCompleta(),
                                      pokemonIA.getInfoCompleta(),
                                      tipoRondaJugador.getEmoji() + " " + tipoRondaJugador.getNombre(),
                                      tipoRondaIA.getEmoji() + " " + tipoRondaIA.getNombre(),
                                      resultadoRonda,
                                      victoriasJugador, victoriasIA);
        
        labelResultado.setText(mensaje);
        
        // Actualizar informaci√≥n de Pok√©mon despu√©s de posible evoluci√≥n
        labelJugador.setText(pokemonJugador.getInfoCompleta());
        labelIA.setText(pokemonIA.getInfoCompleta());
        configurarImagenesEvolucion();
        
        // Continuar a la siguiente ronda o finalizar
        rondaActual++;
        
        new Thread(() -> {
            try {
                Thread.sleep(4000); // Esperar 4 segundos para ver resultado
                javafx.application.Platform.runLater(() -> {
                    if (rondaActual <= 3) {
                        mostrarMensajeRonda(); // Mostrar mensaje para siguiente ronda
                    } else {
                        iniciarCombateReal(); // Iniciar combate real despu√©s de las 3 rondas
                    }
                });
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();
    }
    
    /**
     * Determina el ganador de una ronda individual basado en tipos elegidos
     */
    private String determinarGanadorRondaIndividual() {
        boolean jugadorGana = false;
        String resultado;
        
        // L√≥gica de tipos: Fuego > Planta > Agua > Fuego
        if (tipoRondaJugador == tipoRondaIA) {
            resultado = "ü§ù ¬°EMPATE! Ning√∫n Pok√©mon evoluciona esta ronda";
        } else if ((tipoRondaJugador == TipoPokemon.FUEGO && tipoRondaIA == TipoPokemon.PLANTA) ||
                   (tipoRondaJugador == TipoPokemon.AGUA && tipoRondaIA == TipoPokemon.FUEGO) ||
                   (tipoRondaJugador == TipoPokemon.PLANTA && tipoRondaIA == TipoPokemon.AGUA)) {
            jugadorGana = true;
            victoriasJugador++;
            
            // Evolucionar Pok√©mon del jugador
            if (pokemonJugador.puedeEvolucionar()) {
                PokemonEvolucion evolucionAnterior = pokemonJugador;
                pokemonJugador = pokemonJugador.getSiguienteEvolucion();
                resultado = String.format("üéâ ¬°GANASTE LA RONDA!\n‚ú® %s evoluciona a %s",
                                         evolucionAnterior.getNombre(), pokemonJugador.getNombre());
            } else {
                resultado = String.format("üéâ ¬°GANASTE LA RONDA!\nüíé %s ya est√° en m√°xima evoluci√≥n",
                                         pokemonJugador.getNombre());
            }
        } else {
            victoriasIA++;
            
            // Evolucionar Pok√©mon de la IA
            if (pokemonIA.puedeEvolucionar()) {
                PokemonEvolucion evolucionAnterior = pokemonIA;
                pokemonIA = pokemonIA.getSiguienteEvolucion();
                resultado = String.format("üòû Rival gana la ronda\n‚ú® %s evoluciona a %s",
                                         evolucionAnterior.getNombre(), pokemonIA.getNombre());
            } else {
                resultado = String.format("üòû Rival gana la ronda\nüíé %s ya est√° en m√°xima evoluci√≥n",
                                         pokemonIA.getNombre());
            }
        }
        
        // Guardar resultado de la ronda
        String iconoResultado = jugadorGana ? "üèÜ" : (tipoRondaJugador == tipoRondaIA ? "ü§ù" : "üòû");
        resultadosRondas.add(String.format("%s Ronda %d: %s vs %s", 
                                         iconoResultado, rondaActual,
                                         tipoRondaJugador.getEmoji(), tipoRondaIA.getEmoji()));
        
        return resultado;
    }
    
    /**
     * FASE 4: Iniciar combate real con los Pok√©mon evolucionados
     */
    private void iniciarCombateReal() {
        combateActivo = false;
        combateRealActivo = true;
        
        try {
            // Convertir PokemonEvolucion a PokemonEntity para el combate real
            pokemonCombateJugador = combateService.obtenerPokemonPorTipo(pokemonJugador.getTipo());
            pokemonCombateIA = combateService.obtenerPokemonPorTipo(pokemonIA.getTipo());
            
            if (pokemonCombateJugador == null || pokemonCombateIA == null) {
                System.err.println("Error: No se pudieron cargar los Pok√©mon para el combate real");
                finalizarCombateRondas();
                return;
            }
            
            // Ajustar estad√≠sticas seg√∫n el nivel de evoluci√≥n alcanzado
            ajustarEstadisticasPorEvolucion(pokemonCombateJugador, pokemonJugador.getNivel());
            ajustarEstadisticasPorEvolucion(pokemonCombateIA, pokemonIA.getNivel());
            
            // Determinar qui√©n ataca primero basado en velocidad
            turnoJugador = pokemonCombateJugador.getEstadisticas().getVelocidad() >= 
                          pokemonCombateIA.getEstadisticas().getVelocidad();
            
            // Configurar interfaz para combate real
            configurarInterfazCombateReal();
            
            String mensaje = String.format("‚öîÔ∏è COMBATE REAL INICIADO ‚öîÔ∏è\n\n" +
                                         "üèÜ Resultados de las rondas: %d - %d\n\n" +
                                         "%s (Nv.%d) VS %s (Nv.%d)\n\n" +
                                         "üí° Ahora es un combate real con ataques, vida y defensa\n" +
                                         "%s",
                                         victoriasJugador, victoriasIA,
                                         pokemonJugador.getNombre(), pokemonJugador.getNivel(),
                                         pokemonIA.getNombre(), pokemonIA.getNivel(),
                                         turnoJugador ? "¬°Es tu turno! Elige un ataque" : "El rival atacar√° primero");
            
            labelResultado.setText(mensaje);
            
            // Si es turno de la IA, que ataque primero
            if (!turnoJugador) {
                new Thread(() -> {
                    try {
                        Thread.sleep(2000);
                        javafx.application.Platform.runLater(() -> ejecutarTurnoIA());
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }).start();
            }
            
        } catch (Exception e) {
            System.err.println("Error al iniciar combate real: " + e.getMessage());
            e.printStackTrace();
            finalizarCombateRondas();
        }
    }
    
    /**
     * Ajusta las estad√≠sticas del Pok√©mon seg√∫n su nivel de evoluci√≥n
     */
    private void ajustarEstadisticasPorEvolucion(PokemonEntity pokemon, int nivelEvolucion) {
        // Multiplicadores basados en el nivel de evoluci√≥n
        double multiplicador = 1.0 + (nivelEvolucion - 1) * 0.3; // +30% por nivel
        
        pokemon.getEstadisticas().setVida((int)(pokemon.getEstadisticas().getVida() * multiplicador));
        pokemon.getEstadisticas().setAtaque((int)(pokemon.getEstadisticas().getAtaque() * multiplicador));
        pokemon.getEstadisticas().setDefensa((int)(pokemon.getEstadisticas().getDefensa() * multiplicador));
        pokemon.getEstadisticas().setVelocidad((int)(pokemon.getEstadisticas().getVelocidad() * multiplicador));
        
        // Restaurar vida completa
        pokemon.restaurarVida();
    }
    
    /**
     * Configura la interfaz para el combate real
     */
    private void configurarInterfazCombateReal() {
        // Ocultar botones de selecci√≥n de tipo
        habilitarBotonesSeleccion(false);
        
        // Mostrar informaci√≥n actualizada de los Pok√©mon
        labelJugador.setText(String.format("%s (Nv.%d)\n%s", 
                                         pokemonJugador.getNombre(), 
                                         pokemonJugador.getNivel(),
                                         pokemonJugador.getTipo().getEmoji()));
        labelIA.setText(String.format("%s (Nv.%d)\n%s", 
                                     pokemonIA.getNombre(), 
                                     pokemonIA.getNivel(),
                                     pokemonIA.getTipo().getEmoji()));
        
        // Mostrar barras de vida
        actualizarBarrasVida();
        labelVidaJugador.setVisible(true);
        labelVidaIA.setVisible(true);
        
        // Mostrar botones de ataque
        configurarBotonesAtaque();
        
        // Mantener im√°genes visibles
        configurarImagenesEvolucion();
    }
    
    /**
     * Actualiza las barras de vida
     */
    private void actualizarBarrasVida() {
        if (pokemonCombateJugador != null) {
            labelVidaJugador.setText(String.format("üíö %d/%d HP (%.1f%%)", 
                                                 pokemonCombateJugador.getVidaActual(),
                                                 pokemonCombateJugador.getEstadisticas().getVida(),
                                                 pokemonCombateJugador.getPorcentajeVida()));
        }
        
        if (pokemonCombateIA != null) {
            labelVidaIA.setText(String.format("üíö %d/%d HP (%.1f%%)", 
                                            pokemonCombateIA.getVidaActual(),
                                            pokemonCombateIA.getEstadisticas().getVida(),
                                            pokemonCombateIA.getPorcentajeVida()));
        }
    }
    
    /**
     * Configura los botones de ataque con los movimientos del Pok√©mon
     */
    private void configurarBotonesAtaque() {
        Button[] botonesAtaque = {buttonAtaque1, buttonAtaque2, buttonAtaque3, buttonAtaque4};
        
        if (pokemonCombateJugador != null && pokemonCombateJugador.getAtaques() != null) {
            List<MovimientoEntity> ataques = pokemonCombateJugador.getAtaques();
            
            for (int i = 0; i < botonesAtaque.length; i++) {
                if (i < ataques.size()) {
                    MovimientoEntity ataque = ataques.get(i);
                    botonesAtaque[i].setText(String.format("%s\n%s - %d%% Precisi√≥n", 
                                                         ataque.getNombre(),
                                                         ataque.getTipo(),
                                                         ataque.getPrecision()));
                    botonesAtaque[i].setVisible(true);
                    botonesAtaque[i].setDisable(!turnoJugador);
                } else {
                    botonesAtaque[i].setVisible(false);
                }
            }
        }
    }
    
    /**
     * Ejecuta un ataque real del jugador
     */
    private void ejecutarAtaqueReal(int indiceAtaque) {
        if (!combateRealActivo || !turnoJugador || 
            pokemonCombateJugador == null || pokemonCombateIA == null) {
            return;
        }
        
        if (indiceAtaque < 0 || indiceAtaque >= pokemonCombateJugador.getAtaques().size()) {
            return;
        }
        
        MovimientoEntity ataque = pokemonCombateJugador.getAtaques().get(indiceAtaque);
        
        // Ejecutar ataque
        CalculadoraDano.ResultadoDano resultado = CalculadoraDano.calcularDano(
            pokemonCombateJugador, pokemonCombateIA, ataque);
        
        // Aplicar da√±o
        pokemonCombateIA.recibirDa√±o(resultado.getDano());
        
        // Crear mensaje del ataque
        String mensaje = String.format("‚öîÔ∏è TURNO DEL JUGADOR\n\n%s\n\nüí• %s recibi√≥ %d puntos de da√±o!",
                                      resultado.getMensaje(),
                                      pokemonCombateIA.getNombre(),
                                      resultado.getDano());
        
        // Verificar si el combate termin√≥
        if (pokemonCombateIA.estaDebilitado()) {
            mensaje += String.format("\n\nüíÄ ¬°%s se debilit√≥!\nüéâ ¬°HAS GANADO EL COMBATE! üéâ", 
                                    pokemonCombateIA.getNombre());
            labelResultado.setText(mensaje);
            actualizarBarrasVida();
            finalizarCombateReal(true);
            return;
        }
        
        labelResultado.setText(mensaje);
        actualizarBarrasVida();
        
        // Cambiar turno
        turnoJugador = false;
        configurarBotonesAtaque();
        
        // Ejecutar turno de la IA despu√©s de una pausa
        new Thread(() -> {
            try {
                Thread.sleep(3000);
                javafx.application.Platform.runLater(() -> ejecutarTurnoIA());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();
    }
    
    /**
     * Ejecuta el turno de la IA
     */
    private void ejecutarTurnoIA() {
        if (!combateRealActivo || turnoJugador || 
            pokemonCombateIA == null || pokemonCombateJugador == null) {
            return;
        }
        
        // IA elige un ataque aleatorio
        List<MovimientoEntity> ataques = pokemonCombateIA.getAtaques();
        if (ataques == null || ataques.isEmpty()) {
            System.err.println("Error: La IA no tiene ataques disponibles");
            return;
        }
        
        MovimientoEntity ataque = ataques.get(random.nextInt(ataques.size()));
        
        // Ejecutar ataque
        CalculadoraDano.ResultadoDano resultado = CalculadoraDano.calcularDano(
            pokemonCombateIA, pokemonCombateJugador, ataque);
        
        // Aplicar da√±o
        pokemonCombateJugador.recibirDa√±o(resultado.getDano());
        
        // Crear mensaje del ataque
        String mensaje = String.format("ü§ñ TURNO DEL RIVAL\n\n%s\n\nüí• %s recibi√≥ %d puntos de da√±o!",
                                      resultado.getMensaje(),
                                      pokemonCombateJugador.getNombre(),
                                      resultado.getDano());
        
        // Verificar si el combate termin√≥
        if (pokemonCombateJugador.estaDebilitado()) {
            mensaje += String.format("\n\nüíÄ ¬°%s se debilit√≥!\nüòû ¬°HAS PERDIDO EL COMBATE! üòû", 
                                    pokemonCombateJugador.getNombre());
            labelResultado.setText(mensaje);
            actualizarBarrasVida();
            finalizarCombateReal(false);
            return;
        }
        
        labelResultado.setText(mensaje + "\n\nüí° Es tu turno, elige un ataque");
        actualizarBarrasVida();
        
        // Cambiar turno
        turnoJugador = true;
        configurarBotonesAtaque();
    }
    
    /**
     * Finaliza el combate real y va a resultados
     */
    private void finalizarCombateReal(boolean jugadorGano) {
        combateRealActivo = false;
        
        // Actualizar estad√≠sticas del usuario
        actualizarEstadisticasUsuario(jugadorGano);
        
        // Mostrar resultados despu√©s de una pausa
        new Thread(() -> {
            try {
                Thread.sleep(4000);
                javafx.application.Platform.runLater(() -> finalizarCombateRondas());
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }).start();
    }
    
    /**
     * Finaliza el combate de 3 rondas y va a la pantalla de resultados
     */
    private void finalizarCombateRondas() {
        combateActivo = false;
        combateRealActivo = false;
        
        // Ir a pantalla de resultados
        try {
            Stage stage = (Stage) buttonVolverMenu.getScene().getWindow();
            if (stage != null) {
                FXMLLoader fxmlLoader = new FXMLLoader(PrincipalApplication.class.getResource("resultados.fxml"));
                Scene scene = new Scene(fxmlLoader.load(), 2100, 1200);
                
                // Pasar datos al controlador de resultados
                ResultadosController controllerResultados = fxmlLoader.getController();
                controllerResultados.setDatosCombate(victoriasJugador, victoriasIA, pokemonJugador, pokemonIA, resultadosRondas);
                
                stage.setTitle("PK-GAME - Resultados");
                stage.setScene(scene);
                stage.show();
            } else {
                throw new RuntimeException("Stage is null");
            }
        } catch (Exception e) {
            e.printStackTrace();
            // Fallback: mostrar mensaje en la pantalla actual
            String mensajeResultado = String.format("üèÅ COMBATE FINALIZADO\n\nMarcador: %d - %d\n%s",
                                                   victoriasJugador, victoriasIA,
                                                   victoriasJugador > victoriasIA ? "¬°GANASTE!" : "¬°PERDISTE!");
            labelResultado.setText(mensajeResultado);
            buttonNuevoCombate.setVisible(true);
        }
    }
    
    /**
     * Resetea la interfaz para volver al modo de selecci√≥n
     */
    private void resetearInterfaz() {
        // Reiniciar todas las variables de control
        combateActivo = false;
        combateRealActivo = false;
        pokemonSeleccionado = false;
        rondaActual = 0;
        victoriasJugador = 0;
        victoriasIA = 0;
        resultadosRondas.clear();
        turnoJugador = true;
        
        // Reiniciar tipos y Pok√©mon
        tipoPokemonJugador = null;
        tipoPokemonIA = null;
        tipoRondaJugador = null;
        tipoRondaIA = null;
        pokemonJugador = null;
        pokemonIA = null;
        pokemonCombateJugador = null;
        pokemonCombateIA = null;
        
        // Habilitar botones de selecci√≥n
        habilitarBotonesSeleccion(true);
        
        // Ocultar elementos de combate
        labelJugador.setVisible(false);
        labelIA.setVisible(false);
        labelVidaJugador.setVisible(false);
        labelVidaIA.setVisible(false);
        imagenJugador.setVisible(false);
        imagenIA.setVisible(false);
        buttonNuevoCombate.setVisible(false);
        
        // Ocultar botones de ataque
        Button[] botonesAtaque = {buttonAtaque1, buttonAtaque2, buttonAtaque3, buttonAtaque4};
        for (Button boton : botonesAtaque) {
            boton.setVisible(false);
        }
        
        // Mostrar mensaje inicial
        UsuarioEntity usuario = UsuarioSesion.getInstancia().getUsuario();
        String mensajeUsuario = "";
        if (usuario != null) {
            mensajeUsuario = String.format("üëã ¬°Hola %s! %s\n", usuario.getNombre(), usuario.getTitulo());
            if (usuario.getTotalPartidas() > 0) {
                mensajeUsuario += String.format("üìä R√©cord: %d-%d (%.1f%%) | üî• Racha: %d\n\n",
                                               usuario.getVictoriasTotales(), usuario.getDerrotasTotales(),
                                               usuario.getPorcentajeVictorias(), usuario.getRachaActual());
            } else {
                mensajeUsuario += "üåü ¬°Primera vez! ¬°Buena suerte!\n\n";
            }
        }
        
        labelResultado.setText(mensajeUsuario + "üéÆ PASO 1: ¬°Elige tu Pok√©mon! üéÆ\n\n" +
                               "üî• Charmander | üíß Squirtle | üåø Bulbasaur\n\n" +
                               "üìù Flujo del juego:\n" +
                               "1Ô∏è‚É£ Elige tu Pok√©mon inicial\n" +
                               "2Ô∏è‚É£ Juega 3 rondas eligiendo tipo de ataque\n" +
                               "3Ô∏è‚É£ ¬°Gana rondas para evolucionar!\n" +
                               "4Ô∏è‚É£ ¬°Combate real con ataques y vida!\n\n" +
                               "‚öîÔ∏è Tipos (Piedra-Papel-Tijera):\n" +
                               "üî• Fuego > üåø Planta > üíß Agua > üî• Fuego");
    }
    
    private void ejecutarAtaque(int indiceAtaque) {
        // Ya no se usa en el nuevo sistema de rondas
        // Los ataques son autom√°ticos basados en tipos
    }
    
    /**
     * Actualiza las estad√≠sticas del usuario en la base de datos
     * @param victoria true si el usuario gan√≥, false si perdi√≥
     */
    private void actualizarEstadisticasUsuario(boolean victoria) {
        UsuarioEntity usuario = UsuarioSesion.getInstancia().getUsuario();
        if (usuario != null) {
            try {
                // Actualizar estad√≠sticas en el objeto usuario
                usuario.actualizarEstadisticas(victoria);
                
                // Guardar en la base de datos
                boolean actualizado = usuarioService.actualizarEstadisticas(usuario);
                
                if (actualizado) {
                    System.out.println("‚úÖ Estad√≠sticas actualizadas para " + usuario.getNombre());
                } else {
                    System.err.println("‚ùå Error al actualizar estad√≠sticas en la base de datos");
                }
            } catch (Exception e) {
                System.err.println("Error al actualizar estad√≠sticas: " + e.getMessage());
                e.printStackTrace();
            }
        }
    }
    
    private void habilitarBotonesSeleccion(boolean habilitar) {
        buttonFuego.setDisable(!habilitar);
        buttonAgua.setDisable(!habilitar);
        buttonPlanta.setDisable(!habilitar);
        buttonFuego.setVisible(habilitar);
        buttonAgua.setVisible(habilitar);
        buttonPlanta.setVisible(habilitar);
    }
}

